package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

//go:generate go run generator.go

func main() {
	if err := do(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func do() error {
	jsonPath := filepath.Join("..", "gradient.json")
	jsonBytes, err := ioutil.ReadFile(jsonPath)
	if err != nil {
		return err
	}

	var gradients []Gradient
	if err := json.Unmarshal(jsonBytes, &gradients); err != nil {
		return err
	}

	tmpl, err := template.New("uigrad").Parse(uigradTmpl)
	if err != nil {
		return err
	}

	buf := bytes.Buffer{}
	if err := tmpl.Execute(&buf, gradients); err != nil {
		return err
	}
	outputPath := filepath.Join("..", "uigrad.go")
	if err := ioutil.WriteFile(outputPath, buf.Bytes(), 0644); err != nil {
		return err
	}

	return nil
}

type Gradient struct {
	Name   string   `json:"name"`
	Colors []string `json:"colors"`
}

func (g Gradient) SafeName() string {
	replacer := strings.NewReplacer(" ", "", "'", "", "&", "And", "+", "Plus", "50", "Fifty", "80", "Eighties")
	return replacer.Replace(g.Name)
}

const uigradTmpl = `// Code generated by generator.go DO NOT EDIT.
package uigrad

import (
	"github.com/shasderias/ilysa/colorful"
	"github.com/shasderias/ilysa/colorful/gradient"
)

var (
	{{ range . }}
	{{ .SafeName }} = gradient.New(
		{{ range .Colors }}colorful.Hex("{{ . }}"),{{ end }}
	)
	{{ end }}
)`
